/* tslint:disable */
/* eslint-disable */
/**
 * 后浪API文档
 * 后浪项目接口文档
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@yourapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AdminCreateCreate200Response
 */
export interface AdminCreateCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof AdminCreateCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof AdminCreateCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {AdminCreateCreate200ResponseData}
   * @memberof AdminCreateCreate200Response
   */
  data?: AdminCreateCreate200ResponseData;
}
/**
 *
 * @export
 * @interface AdminCreateCreate200ResponseData
 */
export interface AdminCreateCreate200ResponseData {
  /**
   * ID
   * @type {number}
   * @memberof AdminCreateCreate200ResponseData
   */
  id?: number;
}
/**
 *
 * @export
 * @interface AdminCreateCreateRequest
 */
export interface AdminCreateCreateRequest {
  /**
   * 用户名
   * @type {string}
   * @memberof AdminCreateCreateRequest
   */
  username: string;
  /**
   * 密码
   * @type {string}
   * @memberof AdminCreateCreateRequest
   */
  password: string;
  /**
   * 手机号
   * @type {string}
   * @memberof AdminCreateCreateRequest
   */
  mobile?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AdminCreateCreateRequest
   */
  email?: string;
  /**
   * 角色ID
   * @type {number}
   * @memberof AdminCreateCreateRequest
   */
  role_id?: number;
  /**
   * 企业名称（个人用户无需传值）
   * @type {string}
   * @memberof AdminCreateCreateRequest
   */
  company_name: string;
}
/**
 *
 * @export
 * @interface AdminInfoCreate200Response
 */
export interface AdminInfoCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof AdminInfoCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof AdminInfoCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {AdminInfoCreate200ResponseData}
   * @memberof AdminInfoCreate200Response
   */
  data?: AdminInfoCreate200ResponseData;
}
/**
 *
 * @export
 * @interface AdminInfoCreate200ResponseData
 */
export interface AdminInfoCreate200ResponseData {
  /**
   * ID
   * @type {number}
   * @memberof AdminInfoCreate200ResponseData
   */
  id?: number;
  /**
   * 用户名
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  username?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  mobile?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  email?: string;
  /**
   * 角色ID
   * @type {number}
   * @memberof AdminInfoCreate200ResponseData
   */
  role_id?: number;
  /**
   * 企业名称
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  company_name?: string;
  /**
   * 创建时间
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  create_time?: string;
  /**
   * 更新时间
   * @type {string}
   * @memberof AdminInfoCreate200ResponseData
   */
  update_time?: string;
  /**
   * 状态
   * @type {number}
   * @memberof AdminInfoCreate200ResponseData
   */
  status?: number;
}
/**
 *
 * @export
 * @interface AdminLoginCreate200Response
 */
export interface AdminLoginCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof AdminLoginCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof AdminLoginCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {AdminLoginCreate200ResponseData}
   * @memberof AdminLoginCreate200Response
   */
  data?: AdminLoginCreate200ResponseData;
}
/**
 *
 * @export
 * @interface AdminLoginCreate200ResponseData
 */
export interface AdminLoginCreate200ResponseData {
  /**
   * 登录令牌
   * @type {string}
   * @memberof AdminLoginCreate200ResponseData
   */
  token?: string;
  /**
   *
   * @type {AdminLoginCreate200ResponseDataUserInfo}
   * @memberof AdminLoginCreate200ResponseData
   */
  user_info?: AdminLoginCreate200ResponseDataUserInfo;
}
/**
 * 用户信息
 * @export
 * @interface AdminLoginCreate200ResponseDataUserInfo
 */
export interface AdminLoginCreate200ResponseDataUserInfo {
  /**
   * ID
   * @type {number}
   * @memberof AdminLoginCreate200ResponseDataUserInfo
   */
  id?: number;
  /**
   * 用户名
   * @type {string}
   * @memberof AdminLoginCreate200ResponseDataUserInfo
   */
  username?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof AdminLoginCreate200ResponseDataUserInfo
   */
  mobile?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AdminLoginCreate200ResponseDataUserInfo
   */
  email?: string;
  /**
   * 状态
   * @type {number}
   * @memberof AdminLoginCreate200ResponseDataUserInfo
   */
  status?: number;
}
/**
 *
 * @export
 * @interface AdminLoginCreateRequest
 */
export interface AdminLoginCreateRequest {
  /**
   * 用户名
   * @type {string}
   * @memberof AdminLoginCreateRequest
   */
  username: string;
  /**
   * 密码
   * @type {string}
   * @memberof AdminLoginCreateRequest
   */
  password: string;
}
/**
 *
 * @export
 * @interface AdminResetPasswordCreateRequest
 */
export interface AdminResetPasswordCreateRequest {
  /**
   * 用户名
   * @type {string}
   * @memberof AdminResetPasswordCreateRequest
   */
  username: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AdminResetPasswordCreateRequest
   */
  email: string;
  /**
   * 密码
   * @type {string}
   * @memberof AdminResetPasswordCreateRequest
   */
  password: string;
  /**
   * 确认密码
   * @type {string}
   * @memberof AdminResetPasswordCreateRequest
   */
  confirm_password: string;
}
/**
 *
 * @export
 * @interface AdminUpdateCreateRequest
 */
export interface AdminUpdateCreateRequest {
  /**
   * ID
   * @type {number}
   * @memberof AdminUpdateCreateRequest
   */
  id: number;
  /**
   * 用户名
   * @type {string}
   * @memberof AdminUpdateCreateRequest
   */
  username?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof AdminUpdateCreateRequest
   */
  mobile?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AdminUpdateCreateRequest
   */
  email?: string;
  /**
   * 角色ID
   * @type {number}
   * @memberof AdminUpdateCreateRequest
   */
  role_id?: number;
  /**
   * 企业名称
   * @type {string}
   * @memberof AdminUpdateCreateRequest
   */
  company_name?: string;
  /**
   * 状态
   * @type {number}
   * @memberof AdminUpdateCreateRequest
   */
  status?: number;
}
/**
 *
 * @export
 * @interface MenuCreateCreateRequest
 */
export interface MenuCreateCreateRequest {
  /**
   * 菜单名称
   * @type {string}
   * @memberof MenuCreateCreateRequest
   */
  name: string;
  /**
   * 父菜单ID，顶级菜单传0
   * @type {number}
   * @memberof MenuCreateCreateRequest
   */
  parent_id?: number;
  /**
   * 排序，值越小越靠前
   * @type {number}
   * @memberof MenuCreateCreateRequest
   */
  sort?: number;
  /**
   * 状态
   * @type {number}
   * @memberof MenuCreateCreateRequest
   */
  status?: number;
}
/**
 *
 * @export
 * @interface MenuListCreate200Response
 */
export interface MenuListCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof MenuListCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof MenuListCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {MenuListCreate200ResponseData}
   * @memberof MenuListCreate200Response
   */
  data?: MenuListCreate200ResponseData;
}
/**
 *
 * @export
 * @interface MenuListCreate200ResponseData
 */
export interface MenuListCreate200ResponseData {
  /**
   *
   * @type {MenuListCreate200ResponseDataItems}
   * @memberof MenuListCreate200ResponseData
   */
  items?: MenuListCreate200ResponseDataItems;
  /**
   * 总数
   * @type {number}
   * @memberof MenuListCreate200ResponseData
   */
  total?: number;
  /**
   * 页码
   * @type {number}
   * @memberof MenuListCreate200ResponseData
   */
  page?: number;
  /**
   * 每页数量
   * @type {number}
   * @memberof MenuListCreate200ResponseData
   */
  page_size?: number;
}
/**
 * 菜单列表
 * @export
 * @interface MenuListCreate200ResponseDataItems
 */
export interface MenuListCreate200ResponseDataItems {
  /**
   * ID
   * @type {number}
   * @memberof MenuListCreate200ResponseDataItems
   */
  id?: number;
  /**
   * 菜单名称
   * @type {string}
   * @memberof MenuListCreate200ResponseDataItems
   */
  name?: string;
  /**
   * 父菜单ID
   * @type {number}
   * @memberof MenuListCreate200ResponseDataItems
   */
  parent_id?: number;
  /**
   * 排序
   * @type {number}
   * @memberof MenuListCreate200ResponseDataItems
   */
  sort?: number;
  /**
   * 状态
   * @type {number}
   * @memberof MenuListCreate200ResponseDataItems
   */
  status?: number;
  /**
   * 创建时间
   * @type {string}
   * @memberof MenuListCreate200ResponseDataItems
   */
  create_time?: string;
}
/**
 *
 * @export
 * @interface MenuListCreateRequest
 */
export interface MenuListCreateRequest {
  /**
   * 菜单名称
   * @type {string}
   * @memberof MenuListCreateRequest
   */
  name?: string;
  /**
   * 状态
   * @type {number}
   * @memberof MenuListCreateRequest
   */
  status?: number;
  /**
   * 页码
   * @type {number}
   * @memberof MenuListCreateRequest
   */
  page?: number;
  /**
   * 每页数量
   * @type {number}
   * @memberof MenuListCreateRequest
   */
  page_size?: number;
}
/**
 *
 * @export
 * @interface RoleCreateCreateRequest
 */
export interface RoleCreateCreateRequest {
  /**
   * 角色名称
   * @type {string}
   * @memberof RoleCreateCreateRequest
   */
  name: string;
  /**
   * 角色介绍
   * @type {string}
   * @memberof RoleCreateCreateRequest
   */
  intro?: string;
  /**
   * 状态
   * @type {number}
   * @memberof RoleCreateCreateRequest
   */
  status?: number;
}
/**
 *
 * @export
 * @interface RoleInfoCreate200Response
 */
export interface RoleInfoCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof RoleInfoCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof RoleInfoCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {RoleInfoCreate200ResponseData}
   * @memberof RoleInfoCreate200Response
   */
  data?: RoleInfoCreate200ResponseData;
}
/**
 *
 * @export
 * @interface RoleInfoCreate200ResponseData
 */
export interface RoleInfoCreate200ResponseData {
  /**
   * ID
   * @type {number}
   * @memberof RoleInfoCreate200ResponseData
   */
  id?: number;
  /**
   * 角色名称
   * @type {string}
   * @memberof RoleInfoCreate200ResponseData
   */
  name?: string;
  /**
   * 角色介绍
   * @type {string}
   * @memberof RoleInfoCreate200ResponseData
   */
  intro?: string;
  /**
   * 创建时间
   * @type {string}
   * @memberof RoleInfoCreate200ResponseData
   */
  create_time?: string;
  /**
   * 状态
   * @type {number}
   * @memberof RoleInfoCreate200ResponseData
   */
  status?: number;
}
/**
 *
 * @export
 * @interface RoleListCreate200Response
 */
export interface RoleListCreate200Response {
  /**
   * 状态码
   * @type {number}
   * @memberof RoleListCreate200Response
   */
  code?: number;
  /**
   * 提示信息
   * @type {string}
   * @memberof RoleListCreate200Response
   */
  msg?: string;
  /**
   *
   * @type {RoleListCreate200ResponseData}
   * @memberof RoleListCreate200Response
   */
  data?: RoleListCreate200ResponseData;
}
/**
 *
 * @export
 * @interface RoleListCreate200ResponseData
 */
export interface RoleListCreate200ResponseData {
  /**
   *
   * @type {RoleListCreate200ResponseDataItems}
   * @memberof RoleListCreate200ResponseData
   */
  items?: RoleListCreate200ResponseDataItems;
  /**
   * 总数
   * @type {number}
   * @memberof RoleListCreate200ResponseData
   */
  total?: number;
  /**
   * 页码
   * @type {number}
   * @memberof RoleListCreate200ResponseData
   */
  page?: number;
  /**
   * 每页数量
   * @type {number}
   * @memberof RoleListCreate200ResponseData
   */
  page_size?: number;
}
/**
 * 角色列表
 * @export
 * @interface RoleListCreate200ResponseDataItems
 */
export interface RoleListCreate200ResponseDataItems {
  /**
   * ID
   * @type {number}
   * @memberof RoleListCreate200ResponseDataItems
   */
  id?: number;
  /**
   * 角色名称
   * @type {string}
   * @memberof RoleListCreate200ResponseDataItems
   */
  name?: string;
  /**
   * 角色介绍
   * @type {string}
   * @memberof RoleListCreate200ResponseDataItems
   */
  intro?: string;
  /**
   * 状态
   * @type {number}
   * @memberof RoleListCreate200ResponseDataItems
   */
  status?: number;
  /**
   * 创建时间
   * @type {string}
   * @memberof RoleListCreate200ResponseDataItems
   */
  create_time?: string;
}
/**
 *
 * @export
 * @interface RoleListCreateRequest
 */
export interface RoleListCreateRequest {
  /**
   * 状态
   * @type {number}
   * @memberof RoleListCreateRequest
   */
  status?: number;
  /**
   * 页码
   * @type {number}
   * @memberof RoleListCreateRequest
   */
  page?: number;
  /**
   * 每页数量
   * @type {number}
   * @memberof RoleListCreateRequest
   */
  page_size?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 创建新的用户
     * @param {AdminCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateCreate: async (
      data: AdminCreateCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("adminCreateCreate", "data", data);
      const localVarPath = `/admin/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取用户详细信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminInfoCreate: async (
      data: AdminCreateCreate200ResponseData,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("adminInfoCreate", "data", data);
      const localVarPath = `/admin/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户登录
     * @param {AdminLoginCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLoginCreate: async (
      data: AdminLoginCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("adminLoginCreate", "data", data);
      const localVarPath = `/admin/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 重置用户密码
     * @param {AdminResetPasswordCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResetPasswordCreate: async (
      data: AdminResetPasswordCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("adminResetPasswordCreate", "data", data);
      const localVarPath = `/admin/resetPassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 更新用户信息
     * @param {AdminUpdateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateCreate: async (
      data: AdminUpdateCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("adminUpdateCreate", "data", data);
      const localVarPath = `/admin/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 创建菜单
     * @param {MenuCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menuCreateCreate: async (
      data: MenuCreateCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("menuCreateCreate", "data", data);
      const localVarPath = `/menu/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 菜单列表
     * @param {MenuListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menuListCreate: async (
      data: MenuListCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("menuListCreate", "data", data);
      const localVarPath = `/menu/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 创建角色
     * @param {RoleCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleCreateCreate: async (
      data: RoleCreateCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("roleCreateCreate", "data", data);
      const localVarPath = `/role/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取角色信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInfoCreate: async (
      data: AdminCreateCreate200ResponseData,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("roleInfoCreate", "data", data);
      const localVarPath = `/role/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 角色列表
     * @param {RoleListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleListCreate: async (
      data: RoleListCreateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("roleListCreate", "data", data);
      const localVarPath = `/role/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * 创建新的用户
     * @param {AdminCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminCreateCreate(
      data: AdminCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminCreateCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminCreateCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.adminCreateCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 获取用户详细信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminInfoCreate(
      data: AdminCreateCreate200ResponseData,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminInfoCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminInfoCreate(
        data,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.adminInfoCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 用户登录
     * @param {AdminLoginCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminLoginCreate(
      data: AdminLoginCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminLoginCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminLoginCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.adminLoginCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 重置用户密码
     * @param {AdminResetPasswordCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminResetPasswordCreate(
      data: AdminResetPasswordCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminCreateCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminResetPasswordCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.adminResetPasswordCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 更新用户信息
     * @param {AdminUpdateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUpdateCreate(
      data: AdminUpdateCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminCreateCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUpdateCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.adminUpdateCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 创建菜单
     * @param {MenuCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async menuCreateCreate(
      data: MenuCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminCreateCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.menuCreateCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.menuCreateCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 菜单列表
     * @param {MenuListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async menuListCreate(
      data: MenuListCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MenuListCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.menuListCreate(
        data,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.menuListCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 创建角色
     * @param {RoleCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleCreateCreate(
      data: RoleCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AdminCreateCreate200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleCreateCreate(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.roleCreateCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 获取角色信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleInfoCreate(
      data: AdminCreateCreate200ResponseData,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleInfoCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleInfoCreate(
        data,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.roleInfoCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 角色列表
     * @param {RoleListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleListCreate(
      data: RoleListCreateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleListCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roleListCreate(
        data,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.roleListCreate"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * 创建新的用户
     * @param {AdminCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateCreate(
      data: AdminCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminCreateCreate200Response> {
      return localVarFp
        .adminCreateCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取用户详细信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminInfoCreate(
      data: AdminCreateCreate200ResponseData,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminInfoCreate200Response> {
      return localVarFp
        .adminInfoCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户登录
     * @param {AdminLoginCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLoginCreate(
      data: AdminLoginCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminLoginCreate200Response> {
      return localVarFp
        .adminLoginCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 重置用户密码
     * @param {AdminResetPasswordCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminResetPasswordCreate(
      data: AdminResetPasswordCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminCreateCreate200Response> {
      return localVarFp
        .adminResetPasswordCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 更新用户信息
     * @param {AdminUpdateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateCreate(
      data: AdminUpdateCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminCreateCreate200Response> {
      return localVarFp
        .adminUpdateCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 创建菜单
     * @param {MenuCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menuCreateCreate(
      data: MenuCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminCreateCreate200Response> {
      return localVarFp
        .menuCreateCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 菜单列表
     * @param {MenuListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    menuListCreate(
      data: MenuListCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<MenuListCreate200Response> {
      return localVarFp
        .menuListCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 创建角色
     * @param {RoleCreateCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleCreateCreate(
      data: RoleCreateCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AdminCreateCreate200Response> {
      return localVarFp
        .roleCreateCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取角色信息
     * @param {AdminCreateCreate200ResponseData} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInfoCreate(
      data: AdminCreateCreate200ResponseData,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RoleInfoCreate200Response> {
      return localVarFp
        .roleInfoCreate(data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 角色列表
     * @param {RoleListCreateRequest} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleListCreate(
      data: RoleListCreateRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RoleListCreate200Response> {
      return localVarFp
        .roleListCreate(data, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * 创建新的用户
   * @param {AdminCreateCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public adminCreateCreate(
    data: AdminCreateCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .adminCreateCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取用户详细信息
   * @param {AdminCreateCreate200ResponseData} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public adminInfoCreate(
    data: AdminCreateCreate200ResponseData,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .adminInfoCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户登录
   * @param {AdminLoginCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public adminLoginCreate(
    data: AdminLoginCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .adminLoginCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 重置用户密码
   * @param {AdminResetPasswordCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public adminResetPasswordCreate(
    data: AdminResetPasswordCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .adminResetPasswordCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 更新用户信息
   * @param {AdminUpdateCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public adminUpdateCreate(
    data: AdminUpdateCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .adminUpdateCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 创建菜单
   * @param {MenuCreateCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public menuCreateCreate(
    data: MenuCreateCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .menuCreateCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 菜单列表
   * @param {MenuListCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public menuListCreate(
    data: MenuListCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .menuListCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 创建角色
   * @param {RoleCreateCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public roleCreateCreate(
    data: RoleCreateCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .roleCreateCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取角色信息
   * @param {AdminCreateCreate200ResponseData} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public roleInfoCreate(
    data: AdminCreateCreate200ResponseData,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .roleInfoCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 角色列表
   * @param {RoleListCreateRequest} data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public roleListCreate(
    data: RoleListCreateRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .roleListCreate(data, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
